{
  "title": "Структура Flask-приложения",
  "description": "Пример потока данных при разработке веб-приложения с использованием Flask",
  "blocks": [
    {
      "id": "server_start",
      "title": "Запуск Flask-сервера",
      "icon": "fa-server",
      "description": "Инициализация и запуск Flask-приложения с настройками",
      "details": {
        "explanation": "Flask-сервер запускается с настройками отладки, что позволяет видеть ошибки и автоматически перезагружать сервер при изменении кода",
        "tasks": [
          "Создание экземпляра Flask-приложения",
          "Настройка параметров запуска",
          "Инициализация директорий для хранения данных",
          "Запуск сервера в режиме отладки"
        ]
      },
      "inputData": {
        "title": "Конфигурация сервера",
        "description": "Параметры конфигурации Flask-приложения",
        "format": "python",
        "data": "app = Flask(__name__)\napp.config['DEBUG'] = True\napp.config['SECRET_KEY'] = 'секретный_ключ'\nos.makedirs('examples', exist_ok=True)\nport = 5000\napp.run(debug=True, port=port)"
      },
      "outputData": {
        "title": "Запущенный сервер",
        "description": "Информация о запущенном сервере",
        "format": "text",
        "data": " * Serving Flask app\n * Debug mode: on\n * Running on http://127.0.0.1:5000\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 123-456-789"
      }
    },
    {
      "id": "request_handling",
      "title": "Обработка HTTP-запроса",
      "icon": "fa-exchange-alt",
      "description": "Получение и обработка HTTP-запроса от клиента",
      "details": {
        "explanation": "Когда клиент отправляет запрос, Flask перехватывает его и перенаправляет в соответствующий обработчик маршрута (route handler)",
        "tasks": [
          "Получение HTTP-запроса",
          "Анализ заголовков и тела запроса",
          "Валидация параметров запроса",
          "Перенаправление запроса в соответствующий обработчик"
        ]
      },
      "inputData": {
        "title": "Входящий HTTP-запрос",
        "description": "Запрос от клиента на получение списка примеров",
        "format": "http",
        "data": "GET /examples HTTP/1.1\nHost: localhost:5000\nAccept: application/json\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/92.0.4515.131"
      },
      "outputData": {
        "title": "Маршрутизация запроса",
        "description": "Запрос перенаправлен к обработчику маршрута /examples",
        "format": "python",
        "data": "@app.route('/examples')\ndef list_examples():\n    \"\"\"Возвращает список доступных примеров.\"\"\"\n    # Дальнейшая обработка..."
      }
    },
    {
      "id": "data_processing",
      "title": "Обработка данных",
      "icon": "fa-cogs",
      "description": "Бизнес-логика обработки данных в приложении",
      "details": {
        "explanation": "В этом блоке происходит основная обработка данных в соответствии с бизнес-логикой приложения",
        "tasks": [
          "Чтение файлов из директории примеров",
          "Фильтрация JSON-файлов",
          "Формирование списка примеров",
          "Подготовка ответа для клиента"
        ]
      },
      "inputData": {
        "title": "Параметры обработки",
        "description": "Данные для обработки запроса клиента",
        "format": "python",
        "data": "examples_dir = 'examples'\nfiles = os.listdir(examples_dir)\njson_files = [file for file in files if file.endswith('.json')]"
      },
      "outputData": {
        "title": "Обработанные данные",
        "description": "Результат обработки данных — список примеров",
        "format": "json",
        "data": "[\n  \"simple.json\",\n  \"complex.json\",\n  \"flask_app.json\"\n]"
      }
    },
    {
      "id": "response_creation",
      "title": "Формирование ответа",
      "icon": "fa-reply",
      "description": "Создание HTTP-ответа для клиента",
      "details": {
        "explanation": "Flask формирует HTTP-ответ на основе данных, полученных от обработчика маршрута",
        "tasks": [
          "Форматирование данных в JSON",
          "Установка статус-кода ответа",
          "Добавление заголовков ответа",
          "Сериализация тела ответа"
        ]
      },
      "inputData": {
        "title": "Данные для ответа",
        "description": "Данные, которые нужно отправить клиенту",
        "format": "python",
        "data": "examples = [\"simple.json\", \"complex.json\", \"flask_app.json\"]\nreturn jsonify(examples)"
      },
      "outputData": {
        "title": "HTTP-ответ",
        "description": "Сформированный HTTP-ответ для клиента",
        "format": "http",
        "data": "HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 62\n\n[\n  \"simple.json\",\n  \"complex.json\",\n  \"flask_app.json\"\n]"
      }
    },
    {
      "id": "client_view",
      "title": "Отображение результата",
      "icon": "fa-desktop",
      "description": "Визуализация полученных данных в интерфейсе пользователя",
      "details": {
        "explanation": "Клиент (браузер) получает ответ от сервера и отображает данные в пользовательском интерфейсе. JavaScript обрабатывает JSON-данные и формирует HTML-элементы для отображения списка примеров.",
        "tasks": [
          "Получение HTTP-ответа от сервера",
          "Преобразование JSON в объекты JavaScript",
          "Обновление UI с использованием полученных данных",
          "Добавление обработчиков событий для интерактивности"
        ]
      },
      "inputData": {
        "title": "Данные с сервера",
        "description": "JSON-данные, полученные от сервера",
        "format": "json",
        "data": "[\n  \"simple.json\",\n  \"complex.json\",\n  \"flask_app.json\"\n]"
      },
      "outputData": {
        "title": "Пользовательский интерфейс",
        "description": "Обновленный интерфейс с отображенными данными",
        "format": "javascript",
        "data": "// Обновление списка примеров в UI\nfunction updateExamplesList(examples) {\n  const selector = document.getElementById('flow-selector');\n  \n  // Сохраняем базовые опции\n  const baseOptions = Array.from(selector.options)\n    .slice(0, 3);\n  \n  // Очищаем selector\n  selector.innerHTML = '';\n  \n  // Восстанавливаем базовые опции\n  baseOptions.forEach(opt => selector.appendChild(opt));\n  \n  // Добавляем разделитель\n  const separator = document.createElement('option');\n  separator.disabled = true;\n  separator.textContent = '─────────────────';\n  selector.appendChild(separator);\n  \n  // Добавляем примеры из сервера\n  examples.forEach(example => {\n    const option = document.createElement('option');\n    option.value = example;\n    option.textContent = example;\n    selector.appendChild(option);\n  });\n}"
      }
    }
  ],
  "connections": [
    {
      "from": "server_start",
      "to": "request_handling",
      "label": "Готов принимать запросы"
    },
    {
      "from": "request_handling",
      "to": "data_processing",
      "label": "Передача запроса обработчику"
    },
    {
      "from": "data_processing",
      "to": "response_creation",
      "label": "Передача обработанных данных"
    },
    {
      "from": "response_creation",
      "to": "client_view",
      "label": "Отправка ответа клиенту"
    }
  ]
} 